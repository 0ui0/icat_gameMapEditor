// Generated by CoffeeScript 2.6.1
var DivList;

import PreDiv from "./gameEditor_preDiv";

import gEData from "./gameEditor_data";

import Notice from "../common/notice";

import {
  v4 as uuid
} from "uuid";

export default DivList = class {
  constructor(obj = {
      data: [],
      historyDatas: [],
      cursor: -1,
      groups: [],
      groupLevel: 0,
      copy: [],
      group: [],
      presentGroup: "",
      showZIndex: false,
      showZIndexTimer: null
    }) {
    var i, key, len, ref, value;
    ref = Object.entries(obj);
    for (i = 0, len = ref.length; i < len; i++) {
      [key, value] = ref[i];
      this[key] = value;
    }
  }

  findById(id) {
    checkType(arguments, ["string"], "gameEditor.DivList.findById()");
    return this.data.find((preDiv) => {
      return preDiv.id === id;
    });
  }

  add(preDiv, noRecord) {
    if (!(preDiv instanceof PreDiv)) {
      throw new Error("添加的元素不是PreDiv的实例");
    }
    preDiv.divList = this;
    preDiv.zIndex = this.data.length;
    if (this.presentGroup) {
      preDiv.linkid = this.presentGroup;
    }
    this.data.push(preDiv);
    if (!noRecord) { //不要记录
      return this.record();
    }
  }

  record() {
    var copyData, idMap;
    if (this.historyDatas.length !== this.cursor + 1) {
      this.historyDatas.length = this.cursor + 1;
    }
    copyData = this.data.map((preDiv) => {
      return new PreDiv({...preDiv});
    });
    
    //id映射
    idMap = {};
    this.data.forEach((preDiv, index) => {
      return idMap[preDiv.id] = copyData[index].id;
    });
    //根据映射表修改linkid
    copyData.forEach((preDiv, index) => {
      return preDiv.linkid = idMap[preDiv.linkid] || "";
    });
    copyData.presentGroup = this.presentGroup;
    this.historyDatas.push(copyData);
    return this.cursor++;
  }

  undo() {
    if (this.cursor - 1 > -1) {
      this.cursor--;
      this.data = [...this.historyDatas[this.cursor]];
      return this.presentGroup = this.historyDatas[this.cursor].presentGroup;
    } else {
      this.data = [];
      return this.cursor = -1;
    }
  }

  redo() {
    if (this.cursor + 1 <= this.historyDatas.length - 1) {
      this.cursor++;
      this.data = [...this.historyDatas[this.cursor]];
      return this.presentGroup = this.historyDatas[this.cursor].presentGroup;
    }
  }

  addNoRepeat(preDiv) {
    if (!(preDiv instanceof PreDiv)) {
      throw new Error("添加的元素不是PreDiv的实例");
    }
    if (!this.checkSameSiteRepeat(preDiv)) {
      return this.add(preDiv);
    }
  }

  addNoRepeatAutoDraw(preDiv) {
    if (!(preDiv instanceof PreDiv)) {
      throw new Error("添加的元素不是PreDiv的实例");
    }
    if (!(this.data.find((item) => {
      return preDiv.x === item.x && preDiv.y === item.y && (!item.linkid || item.linkid === this.presentGroup);
    }))) {
      return this.add(preDiv);
    }
  }

  checkSameSiteRepeat(preDiv) {
    var samePreDivs;
    if (!(preDiv instanceof PreDiv)) {
      throw new Error("添加的元素不是PreDiv的实例");
    }
    samePreDivs = this.data.find((item) => {
      return preDiv.x === item.x && preDiv.y === item.y && preDiv.imgX === item.imgX && preDiv.imgY === item.imgY && preDiv.url === item.url && preDiv.imgW === item.imgW && preDiv.imgH === item.imgH;
    });
    if (samePreDivs) {
      return samePreDivs;
    } else {
      return null;
    }
  }

  getSelectedItems() {
    return this.data.filter((preDiv) => {
      return preDiv.hasBorder && !preDiv.hideState && !preDiv.lockState;
    });
  }

  getCheckedItems() {
    return this.data.filter((preDiv) => {
      return preDiv.checked;
    });
  }

  delSelectedItems() {
    this.getSelectedItems().forEach((preDiv) => {
      return preDiv.del();
    });
    return this.record();
  }

  translateSelectedItems(deltaX, deltaY) {
    checkType(arguments, ["number", "number"], "gameEditor.DivList.translateSelectedItem()");
    return this.getSelectedItems().forEach((preDiv) => {
      preDiv.x += deltaX;
      return preDiv.y += deltaY;
    });
  }

  //@updateGroup() #太卡了，剪切到到移动结束部分运行
  setXYSelectedItems(x, y) {
    checkType(arguments, ["number", "number"], "gameEditor.DivList.translateSelectedItem()");
    this.getSelectedItems().forEach((preDiv) => {
      preDiv.x = x;
      return preDiv.y = y;
    });
    return this.record();
  }

  changeZIndexSelectedItems(deltaZIndex) {
    checkType(arguments, ["number"], "gameEditor.DivList.changeZIndexSelectedItem()");
    this.showZIndex = true;
    this.showZIndexTimer = clearTimeout(this.showZIndexTimer);
    this.showZIndexTimer = setTimeout(() => {
      this.showZIndex = false;
      return m.redraw();
    }, 1000);
    this.getSelectedItems().forEach((preDiv) => {
      if (preDiv.zIndex + deltaZIndex > 0) {
        return preDiv.zIndex += deltaZIndex;
      }
    });
    return this.record();
  }

  resetZIndexSelectedItems(zIndex) {
    checkType(arguments, ["number"], "gameEditor.DivList.resetZIndexSelectedItem()");
    this.getSelectedItems().forEach((preDiv) => {
      return preDiv.zIndex = zIndex;
    });
    return this.record();
  }

  becomeGroup_noUse() {
    var sameGroup, selectedItems;
    selectedItems = this.getSelectedItems();
    sameGroup = this.groups.find((group) => {
      var tmp1, tmp2;
      tmp1 = group.every((item1) => {
        return selectedItems.some((item2) => {
          return item1 === item2;
        });
      });
      tmp2 = selectedItems.every((item1) => {
        return group.some((item2) => {
          return item1 === item2;
        });
      });
      return tmp1 && tmp2;
    });
    if (sameGroup) { //已经有相同的组，不需要再编组
      return;
    }
    this.groups.push(selectedItems);
    return this.record();
  }

  findInGroup_noUse(preDiv) {
    var inGroups;
    if (!(preDiv instanceof PreDiv)) {
      throw new Error("要查找所属组的元素不是PreDiv的实例");
    }
    //查找元素所在的组，一个元素可以同时在多个组里
    inGroups = this.groups.filter((group) => {
      return group.find((item) => {
        return preDiv === item;
      });
    });
    if ((inGroups != null ? inGroups.length : void 0) > 0) {
      inGroups = inGroups.sort((x1, x2) => {
        return x2.length - x1.length;
      });
      return inGroups[this.groupLevel];
    } else {
      return null;
    }
  }

  exitGroup_noUse() {
    this.getSelectedItems().forEach((preDiv) => {
      var group, groupIndex;
      group = this.findInGroup(preDiv);
      groupIndex = this.groups.indexOf(group);
      return this.groups.splice(groupIndex, 1);
    });
    return this.record();
  }

  getInRect(gEData) { //获取被框选元素
    checkType(arguments, ["object"], "DivList.getInRect()");
    return this.data.filter((preDiv) => {
      var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;
      if ((((gEData.choiseBox2.x < (ref = preDiv.x) && ref < gEData.choiseBox2.x + gEData.choiseBox2.w)) && ((gEData.choiseBox2.y < (ref1 = preDiv.y) && ref1 < gEData.choiseBox2.y + gEData.choiseBox2.h))) || (((gEData.choiseBox2.x < (ref2 = preDiv.x + preDiv.imgW) && ref2 < gEData.choiseBox2.x + gEData.choiseBox2.w)) && ((gEData.choiseBox2.y < (ref3 = preDiv.y) && ref3 < gEData.choiseBox2.y + gEData.choiseBox2.h))) || (((gEData.choiseBox2.x < (ref4 = preDiv.x) && ref4 < gEData.choiseBox2.x + gEData.choiseBox2.w)) && ((gEData.choiseBox2.y < (ref5 = preDiv.y + preDiv.imgH) && ref5 < gEData.choiseBox2.y + gEData.choiseBox2.h))) || (((gEData.choiseBox2.x < (ref6 = preDiv.x + preDiv.imgW) && ref6 < gEData.choiseBox2.x + gEData.choiseBox2.w)) && ((gEData.choiseBox2.y < (ref7 = preDiv.y + preDiv.imgH) && ref7 < gEData.choiseBox2.y + gEData.choiseBox2.h)))) {
        return true;
      } else {
        return false;
      }
    });
  }

  getInRect(gEData) { //获取被框选元素ai版本
    checkType(arguments, ["object"], "DivList.getInRect()");
    return this.data.filter((preDiv) => {
      var x1, x2, y1, y2;
      x1 = Math.max(gEData.choiseBox2.x, preDiv.x);
      y1 = Math.max(gEData.choiseBox2.y, preDiv.y);
      x2 = Math.min(gEData.choiseBox2.x + gEData.choiseBox2.w, preDiv.x + preDiv.imgW);
      y2 = Math.min(gEData.choiseBox2.y + gEData.choiseBox2.h, preDiv.y + preDiv.imgH);
      return x1 < x2 && y1 < y2;
    });
  }

  selectRectItems() {
    this.getInRect(gEData).forEach((preDiv) => {
      if (preDiv.lockState || preDiv.hideState) {
        return preDiv.cancelSelect();
      }
      if (this.presentGroup) {
        if (preDiv.linkid === this.presentGroup) {
          return preDiv.select(1);
        } else {
          return preDiv.cancelSelect();
        }
      } else {
        if (!preDiv.linkid) {
          return preDiv.select(1);
        } else {
          return preDiv.cancelSelect();
        }
      }
    });
    return this.getSelectedItems().forEach((preDiv) => {
      var group;
      group = this.findInGroup(preDiv);
      return group != null ? group.forEach((preDiv1) => {
        return preDiv1.select(2);
      }) : void 0;
    });
  }

  copySelectedItems() {
    return this.copy = this.getSelectedItems();
  }

  pasteCopyedItems() {
    var idMap;
    idMap = {};
    this.copyed = this.copy.map((preDiv) => {
      var div;
      div = new PreDiv({
        ...preDiv,
        x: preDiv.x + gEData.getW(),
        y: preDiv.y + gEData.getH(),
        id: uuid(),
        hasBorder: 1,
        divList: this
      });
      return div;
    });
    this.copy.forEach((preDiv, index) => {
      idMap[preDiv.id] = this.copyed[index].id;
      return preDiv.hasBorder = 0;
    });
    this.copyed.forEach((preDiv) => {
      return preDiv.linkid = idMap[preDiv.linkid] || "";
    });
    this.data = [...this.data, ...this.copyed];
    this.copy = this.copyed;
    return this.record();
  }

  fillRect() {
    var allNum, i, j, preObjs, ref, ref1, tmp, xIndex, xNum, xRest, yIndex, yNum, yRest;
    if (!gEData.choiseBox2.w || !gEData.choiseBox2.h || !gEData.choiseBox2.x || !gEData.choiseBox2.y) {
      return Notice.launch({
        msg: "请设置填充区域"
      });
    }
    this.data.forEach((item) => {
      return item.cancelSelect();
    });
    if (gEData.choiseBox2.w > 0 || gEData.choiseBox2.h > 0) {
      gEData.choiseBox2.x = gEData.getBoxX(gEData.choiseBox2.x);
      gEData.choiseBox2.y = gEData.getBoxY(gEData.choiseBox2.y);
      gEData.choiseBox2.w = gEData.getBoxX(gEData.choiseBox2.w);
      gEData.choiseBox2.h = gEData.getBoxY(gEData.choiseBox2.h);
    }
    preObjs = [];
    xNum = Math.floor(gEData.choiseBox2.w / gEData.choiseBox.w);
    yNum = Math.floor(gEData.choiseBox2.h / gEData.choiseBox.h);
    xRest = gEData.choiseBox2.w % gEData.choiseBox.w;
    yRest = gEData.choiseBox2.h % gEData.choiseBox.h;
    allNum = xNum * yNum + xRest * yRest;
    for (xIndex = i = 0, ref = xNum; (0 <= ref ? i < ref : i > ref); xIndex = 0 <= ref ? ++i : --i) {
      for (yIndex = j = 0, ref1 = yNum; (0 <= ref1 ? j < ref1 : j > ref1); yIndex = 0 <= ref1 ? ++j : --j) {
        tmp = new PreDiv({
          id: Date.now(),
          x: gEData.choiseBox2.x + xIndex * gEData.choiseBox.w,
          y: gEData.choiseBox2.y + yIndex * gEData.choiseBox.h,
          imgX: gEData.choiseBox.x,
          imgY: gEData.choiseBox.y,
          imgW: gEData.choiseBox.w,
          imgH: gEData.choiseBox.h,
          url: gEData.tilesetUrl,
          hasBorder: 2
        });
        this.add(new PreDiv(tmp));
      }
    }
    this.becomeGroup();
    return this.record();
  }

  findChildren(id) {
    var groups;
    checkType(arguments, ["string"], "gameEditor.DivList.findChildren()");
    return groups = this.data.filter((preDiv) => {
      return preDiv.linkid === id;
    });
  }

  findChildrenDeep(id, index = 0, childArr = []) {
    var children;
    checkType(arguments, ["string", "number?", "array?"], "gameEditor.DivList.findChildrenDeep()");
    children = this.findChildren(id);
    childArr.push(...children);
    children.forEach((child) => {
      return this.findChildrenDeep(child.id, index++, childArr);
    });
    if (childArr.length > 0) {
      return childArr;
    } else {
      return null;
    }
  }

  getGroups() {
    return this.data.filter((preDiv) => {
      return preDiv.isGroup;
    });
  }

  updateGroup() { //根据子元素调整组边界
    console.log("updateGroup");
    return this.getGroups().forEach((group) => {
      var children, x, x1, y, y1, z;
      children = this.findChildrenDeep(group.id);
      x = y = x1 = y1 = z = 0;
      children.forEach((child, index) => {
        if (index === 0) {
          x = child.x;
          y = child.y;
          x1 = child.x + child.imgW;
          y1 = child.y + child.imgH;
          z = child.zIndex;
        }
        x = child.x < x ? child.x : x;
        y = child.y < y ? child.y : y;
        x1 = child.x + child.imgW > x1 ? child.x + child.imgW : x1;
        y1 = child.y + child.imgH > y1 ? child.y + child.imgH : y1;
        return z = child.zIndex > z ? child.zIndex : z;
      });
      group.x = x;
      group.y = y;
      group.imgW = x1 - x;
      group.imgH = y1 - y;
      return group.zIndex = z + 1;
    });
  }

  becomeGroup() {
    var group, groupId, selectedItems;
    selectedItems = this.getSelectedItems();
    if (!(selectedItems.length > 0)) {
      return;
    }
    selectedItems = selectedItems.filter((preDiv) => {
      if (this.presentGroup) {
        return preDiv.linkid === this.presentGroup;
      } else {
        return !preDiv.linkid;
      }
    });
    //beforeLinkid = selectedItems[0].linkid
    groupId = uuid();
    selectedItems.forEach((preDiv, index) => {
      return preDiv.linkid = groupId;
    });
    group = new PreDiv({
      id: groupId,
      linkid: this.presentGroup || "",
      isGroup: true,
      x: 0,
      y: 0,
      imgX: 0,
      imgY: 0,
      zIndex: 99,
      imgW: 0,
      imgH: 0,
      url: "",
      hasBorder: 1
    });
    group.changeId(groupId);
    this.add(group, true);
    this.updateGroup();
    return this.record();
  }

  findInGroup(preDiv) { //递归查找组的所有元素和子元素
    var fn, output;
    if (!(preDiv instanceof PreDiv)) {
      throw new Error("要查找所属组的元素不是PreDiv的实例");
    }
    output = [];
    fn = (preDiv) => {
      return this.data.forEach((item) => {
        if (item.linkid === preDiv.id) { //and item.linkid isnt @presentGroup
          fn(item);
          return output.push(item);
        }
      });
    };
    fn(preDiv);
    if (output.length > 0) {
      return output;
    } else {
      return null;
    }
  }

  setPresentGroup(groupId) {
    checkType(arguments, ["string"], "gameEditor.DivList.setPresentGroup()");
    return this.presentGroup = groupId;
  }

  checkInPresentGroup(preDiv) {
    if (this.presentGroup === "") {
      if (!preDiv.linkid) {
        return true;
      } else {
        return false;
      }
    } else {
      if ((preDiv.linkid != null) === this.presentGroup) {
        return true;
      } else {
        return false;
      }
    }
  }

  cancelSelectAll() {
    return this.data.forEach((preDiv) => {
      return preDiv.cancelSelect();
    });
  }

  isInGroup(preDiv) {
    var base, base1, name, name1, ref, ref1;
    if (this.groupChildren == null) {
      this.groupChildren = {};
    }
    if ((base = this.groupChildren)[name = this.presentGroup] == null) {
      base[name] = this.findChildrenDeep(this.presentGroup);
    }
    if ((base1 = this.groupChildren)[name1 = this.presentGroup] == null) {
      base1[name1] = [];
    }
    if ((ref = this.groupChildren[this.presentGroup]) != null) {
      if (ref.timer == null) {
        ref.timer = setTimeout(() => {
          return this.groupChildren[this.presentGroup] = null;
        }, 1000); //递归太卡，延迟一下
      }
    }
    if (this.presentGroup) {
      if ((ref1 = this.groupChildren[this.presentGroup]) != null ? ref1.find((child) => {
        return child.id === preDiv.id;
      }) : void 0) {
        return true;
      } else {
        return false;
      }
    } else {
      return true;
    }
  }

  exitGroup() {
    return this.getSelectedItems().forEach((preDiv) => {
      if (preDiv.isGroup) {
        this.data.forEach((dataPreDiv) => {
          if (dataPreDiv.linkid === preDiv.id) { //修改子元素指向
            if (preDiv.linkid) {
              return dataPreDiv.linkid = preDiv.linkid;
            } else {
              return dataPreDiv.linkid = "";
            }
          }
        });
        return preDiv.del(); //删除组
      }
    });
  }

  hideOrShow() {
    this.getSelectedItems().forEach((preDiv) => {
      return preDiv.hideOrShow();
    });
    return this.record();
  }

  lockOrUnlock() {
    this.getSelectedItems().forEach((preDiv) => {
      return preDiv.lockOrUnlock();
    });
    return this.record();
  }

  hide() {
    this.getSelectedItems().forEach((preDiv) => {
      return preDiv.hide();
    });
    return this.record();
  }

  show() {
    this.getSelectedItems().forEach((preDiv) => {
      return preDiv.show();
    });
    return this.record();
  }

  lock() {
    this.getSelectedItems().forEach((preDiv) => {
      return preDiv.lock();
    });
    return this.record();
  }

  unlock() {
    this.getSelectedItems().forEach((preDiv) => {
      return preDiv.unlock();
    });
    return this.record();
  }

  hideOrShowCheckedItems() {
    this.getCheckedItems().forEach((preDiv) => {
      return preDiv.hideOrShow();
    });
    return this.record();
  }

  lockOrUnlockCheckedItems() {
    this.getCheckedItems().forEach((preDiv) => {
      return preDiv.lockOrUnlock();
    });
    return this.record();
  }

  save() {
    var aDom, blob, copyData, json;
    copyData = [];
    this.data.forEach((preDiv) => {
      var cpPreDiv;
      cpPreDiv = {...preDiv};
      delete cpPreDiv.divList;
      delete cpPreDiv.dom;
      return copyData.push(cpPreDiv);
    });
    json = {
      outData: copyData,
      canvasHeight: gEData.canvasHeight,
      canvasWidth: gEData.canvasWidth
    };
    json = JSON.stringify(json);
    blob = new Blob([json]);
    aDom = document.createElement("a");
    aDom.download = `data_${Date.now()}.json`;
    aDom.href = window.URL.createObjectURL(blob);
    document.body.appendChild(aDom);
    aDom.click();
    return aDom.remove();
  }

  import() {
    var json;
    json = null;
    return Notice.launch({
      tip: "请选择“.json”格式的数据文件",
      content: function() {
        return {
          view: function() {
            return m("", [
              m("input[type=file][accept=.json]",
              {
                onchange: async(e) => {
                  var data,
              err,
              file,
              ref;
                  try {
                    file = e.target.files[0];
                    data = (await new Promise((res,
              rej) => {
                      var reader;
                      reader = new FileReader();
                      reader.onload = function() {
                        return res(reader.result);
                      };
                      return reader.readAsText(file);
                    }));
                    json = JSON.parse(data);
                    if (json.length) {
                      json = {
                        outData: json
                      };
                    }
                    if (!((ref = json.outData[0]) != null ? ref.id : void 0)) {
                      throw new Error();
                    }
                  } catch (error) {
                    err = error;
                    console.log(err);
                    return Notice.launch({
                      msg: "导入失败，未知错误"
                    });
                  }
                }
              })
            ]);
          }
        };
      },
      confirm: () => {
        var idMap;
        this.data = json.outData.map((preDiv) => {
          return new PreDiv({
            ...preDiv,
            divList: this
          });
        });
        
        //id映射
        idMap = {};
        json.outData.forEach((preDiv, index) => {
          return idMap[preDiv.id] = this.data[index].id;
        });
        //根据映射表修改linkid
        this.data.forEach((preDiv, index) => {
          return preDiv.linkid = idMap[preDiv.linkid] || "";
        });
        
        //设置画布
        if (json.canvasWidth && json.canvasHeight) {
          gEData.canvasWidth = json.canvasWidth;
          gEData.canvasHeight = json.canvasHeight;
        }
        this.record();
        return void 0;
      }
    });
  }

  async export() {
    var aDom, blob, canvas, ctx, divListOrder, err, i, len, preDiv;
    try {
      canvas = document.createElement("canvas");
      canvas.width = gEData.canvasWidth;
      canvas.height = gEData.canvasHeight;
      ctx = canvas.getContext("2d");
      divListOrder = this.data.sort((x1, x2) => {
        return Number(x1.dom.style.zIndex) - Number(x2.dom.style.zIndex);
      });
      for (i = 0, len = divListOrder.length; i < len; i++) {
        preDiv = divListOrder[i];
        await (async(preDiv) => {
          var imgDom;
          if (!preDiv.hideState) {
            imgDom = (await new Promise((res, rej) => {
              imgDom = new Image();
              imgDom.src = preDiv.url;
              imgDom.onload = () => {
                return res(imgDom);
              };
              return imgDom.onerror = (err) => {
                return res(imgDom);
              };
            }));
            return ctx.drawImage(imgDom, preDiv.imgX, preDiv.imgY, preDiv.imgW, preDiv.imgH, preDiv.x, preDiv.y, preDiv.imgW, preDiv.imgH);
          }
        })(preDiv);
      }
      
      //data = canvas.toDataURL "image/png"
      blob = (await new Promise((res, rej) => {
        return canvas.toBlob((blob) => {
          return res(blob);
        });
      }));
      aDom = document.createElement("a");
      aDom.download = `map_${Date.now()}.jpg`;
      aDom.href = window.URL.createObjectURL(blob);
      document.body.appendChild(aDom);
      aDom.click();
      return aDom.remove();
    } catch (error) {
      err = error;
      return console.log(err);
    }
  }

};
