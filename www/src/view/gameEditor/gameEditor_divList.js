// Generated by CoffeeScript 2.6.1
var DivList;

import PreDiv from "./gameEditor_preDiv";

import gEData from "./gameEditor_data";

import {
  v4 as uuid
} from "uuid";

export default DivList = class {
  constructor(obj = {
      data: [],
      groups: [],
      groupLevel: 0,
      copy: []
    }) {
    var i, key, len, ref, value;
    ref = Object.entries(obj);
    for (i = 0, len = ref.length; i < len; i++) {
      [key, value] = ref[i];
      this[key] = value;
    }
  }

  findById(id) {
    return this.data.find((preDiv) => {
      return preDiv.id === id;
    });
  }

  add(preDiv) {
    if (!(preDiv instanceof PreDiv)) {
      throw new Error("添加的元素不是PreDiv的实例");
    }
    preDiv.divList = this;
    return this.data.push(preDiv);
  }

  addNoRepeat(preDiv) {
    if (!(preDiv instanceof PreDiv)) {
      throw new Error("添加的元素不是PreDiv的实例");
    }
    if (!this.checkSameSiteRepeat(preDiv)) {
      return this.add(preDiv);
    }
  }

  addNoRepeatAutoDraw(preDiv) {
    if (!(preDiv instanceof PreDiv)) {
      throw new Error("添加的元素不是PreDiv的实例");
    }
    if (!(this.data.find((item) => {
      return preDiv.x === item.x && preDiv.y === item.y && !this.findInGroup(item);
    }))) {
      return this.add(preDiv);
    }
  }

  checkSameSiteRepeat(preDiv) {
    var samePreDivs;
    if (!(preDiv instanceof PreDiv)) {
      throw new Error("添加的元素不是PreDiv的实例");
    }
    samePreDivs = this.data.find((item) => {
      return preDiv.x === item.x && preDiv.y === item.y && preDiv.imgX === item.imgX && preDiv.imgY === item.imgY && preDiv.url === item.url && preDiv.imgW === item.imgW && preDiv.imgH === item.imgH;
    });
    if (samePreDivs) {
      return samePreDivs;
    } else {
      return null;
    }
  }

  getSelectedItems() {
    return this.data.filter((preDiv) => {
      return preDiv.hasBorder;
    });
  }

  delSelectedItems() {
    return this.getSelectedItems().forEach((preDiv) => {
      return preDiv.del();
    });
  }

  translateSelectedItems(deltaX, deltaY) {
    checkType(arguments, ["number", "number"], "gameEditor.DivList.translateSelectedItem()");
    return this.getSelectedItems().forEach((preDiv) => {
      preDiv.x += deltaX;
      return preDiv.y += deltaY;
    });
  }

  setXYSelectedItems(x, y) {
    checkType(arguments, ["number", "number"], "gameEditor.DivList.translateSelectedItem()");
    return this.getSelectedItems().forEach((preDiv) => {
      preDiv.x = x;
      return preDiv.y = y;
    });
  }

  changeZIndexSelectedItems(deltaZIndex) {
    checkType(arguments, ["number"], "gameEditor.DivList.changeZIndexSelectedItem()");
    return this.getSelectedItems().forEach((preDiv) => {
      return preDiv.zIndex += deltaZIndex;
    });
  }

  resetZIndexSelectedItems(zIndex) {
    checkType(arguments, ["number"], "gameEditor.DivList.resetZIndexSelectedItem()");
    return this.getSelectedItems().forEach((preDiv) => {
      return preDiv.zIndex = zIndex;
    });
  }

  becomeGroup() {
    var sameGroup, selectedItems;
    selectedItems = this.getSelectedItems();
    sameGroup = this.groups.find((group) => {
      var tmp1, tmp2;
      tmp1 = group.every((item1) => {
        return selectedItems.some((item2) => {
          return item1 === item2;
        });
      });
      tmp2 = selectedItems.every((item1) => {
        return group.some((item2) => {
          return item1 === item2;
        });
      });
      return tmp1 && tmp2;
    });
    if (sameGroup) { //已经有相同的组，不需要再编组
      return;
    }
    return this.groups.push(selectedItems);
  }

  findInGroup(preDiv) {
    var inGroups;
    if (!(preDiv instanceof PreDiv)) {
      throw new Error("要查找所属组的元素不是PreDiv的实例");
    }
    //查找元素所在的组，一个元素可以同时在多个组里
    inGroups = this.groups.filter((group) => {
      return group.find((item) => {
        return preDiv === item;
      });
    });
    if ((inGroups != null ? inGroups.length : void 0) > 0) {
      inGroups = inGroups.sort((x1, x2) => {
        return x2.length - x1.length;
      });
      return inGroups[this.groupLevel];
    } else {
      return null;
    }
  }

  exitGroup() {
    return this.getSelectedItems().forEach((preDiv) => {
      var group, groupIndex;
      group = this.findInGroup(preDiv);
      groupIndex = this.groups.indexOf(group);
      return this.groups.splice(groupIndex, 1);
    });
  }

  getInRect(gEData) { //获取被框选元素
    checkType(arguments, ["object"], "DivList.getInRect()");
    return this.data.filter((preDiv) => {
      var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;
      if ((((gEData.choiseBox2.x < (ref = preDiv.x) && ref < gEData.choiseBox2.x + gEData.choiseBox2.w)) && ((gEData.choiseBox2.y < (ref1 = preDiv.y) && ref1 < gEData.choiseBox2.y + gEData.choiseBox2.h))) || (((gEData.choiseBox2.x < (ref2 = preDiv.x + preDiv.w) && ref2 < gEData.choiseBox2.x + gEData.choiseBox2.w)) && ((gEData.choiseBox2.y < (ref3 = preDiv.y) && ref3 < gEData.choiseBox2.y + gEData.choiseBox2.h))) || (((gEData.choiseBox2.x < (ref4 = preDiv.x) && ref4 < gEData.choiseBox2.x + gEData.choiseBox2.w)) && ((gEData.choiseBox2.y < (ref5 = preDiv.y + preDiv.h) && ref5 < gEData.choiseBox2.y + gEData.choiseBox2.h))) || (((gEData.choiseBox2.x < (ref6 = preDiv.x + preDiv.w) && ref6 < gEData.choiseBox2.x + gEData.choiseBox2.w)) && ((gEData.choiseBox2.y < (ref7 = preDiv.y + preDiv.h) && ref7 < gEData.choiseBox2.y + gEData.choiseBox2.h)))) {
        return true;
      } else {
        return false;
      }
    });
  }

  copySelectedItems() {
    this.copy = this.getSelectedItems().map((preDiv) => {
      var div;
      preDiv.hasBorder = 0;
      div = new PreDiv({
        ...preDiv,
        x: preDiv.x + gEData.getW(),
        y: preDiv.y + gEData.getH(),
        id: uuid(),
        hasBorder: 1
      });
      div.divList = this;
      return div;
    });
    return console.log("copy", this.copy);
  }

  pasteCopyedItems() {
    this.copy = this.copy.map((preDiv) => {
      var div;
      preDiv.hasBorder = 0;
      div = new PreDiv({
        ...preDiv,
        x: preDiv.x + gEData.getW(),
        y: preDiv.y + gEData.getH(),
        id: uuid(),
        hasBorder: 1
      });
      div.divList = this;
      return div;
    });
    this.data = [...this.data, ...this.copy];
    return console.log(this.data);
  }

  fillRect() {
    var allNum, i, j, preObjs, ref, ref1, tmp, xIndex, xNum, xRest, yIndex, yNum, yRest;
    this.data.forEach((item) => {
      return item.cancelSelect();
    });
    if (gEData.choiseBox2.w > 0 || gEData.choiseBox2.h > 0) {
      gEData.choiseBox2.x = gEData.getBoxX(gEData.choiseBox2.x);
      gEData.choiseBox2.y = gEData.getBoxY(gEData.choiseBox2.y);
      gEData.choiseBox2.w = gEData.getBoxX(gEData.choiseBox2.w);
      gEData.choiseBox2.h = gEData.getBoxY(gEData.choiseBox2.h);
    }
    preObjs = [];
    xNum = Math.floor(gEData.choiseBox2.w / gEData.choiseBox.w);
    yNum = Math.floor(gEData.choiseBox2.h / gEData.choiseBox.h);
    xRest = gEData.choiseBox2.w % gEData.choiseBox.w;
    yRest = gEData.choiseBox2.h % gEData.choiseBox.h;
    allNum = xNum * yNum + xRest * yRest;
    for (xIndex = i = 0, ref = xNum; (0 <= ref ? i < ref : i > ref); xIndex = 0 <= ref ? ++i : --i) {
      for (yIndex = j = 0, ref1 = yNum; (0 <= ref1 ? j < ref1 : j > ref1); yIndex = 0 <= ref1 ? ++j : --j) {
        tmp = new PreDiv({
          id: Date.now(),
          x: gEData.choiseBox2.x + xIndex * gEData.choiseBox.w,
          y: gEData.choiseBox2.y + yIndex * gEData.choiseBox.h,
          imgX: gEData.choiseBox.x,
          imgY: gEData.choiseBox.y,
          imgW: gEData.choiseBox.w,
          imgH: gEData.choiseBox.h,
          url: gEData.tilesetUrl,
          hasBorder: 2
        });
        this.add(new PreDiv(tmp));
      }
    }
    return this.becomeGroup();
  }

};
