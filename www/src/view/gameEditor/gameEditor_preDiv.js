// Generated by CoffeeScript 2.6.1
import {
  v4 as uuid
} from "uuid";

import gEData from "./gameEditor_data";

export default (class {
  constructor(obj = {
      id: uuid(),
      x: 0,
      y: 0,
      autoType: null,
      autoMain: false,
      imgX: 0,
      imgY: 0,
      imgW: gEData.getW(),
      imgH: gEData.getH(),
      url: "",
      hasBorder: 0,
      zIndex: 1,
      linkid: "",
      hideState: false,
      lockState: false,
      checked: false,
      isGroup: false
    }) {
    var i, key, len, ref, value;
    obj.id = uuid();
    ref = Object.entries(obj);
    for (i = 0, len = ref.length; i < len; i++) {
      [key, value] = ref[i];
      this[key] = value;
    }
    if (obj.divList) {
      this.divList = obj.divList;
    }
  }

  changeId(newId) {
    checkType(arguments, ["string"], "gameEditor.PreDiv.changeId()");
    return this.id = newId;
  }

  del() {
    return this.divList.data = this.divList.data.filter((preDiv) => {
      return preDiv.id !== this.id;
    });
  }

  select(level) { //选中
    this.hasBorder = level;
    if (!(this.lockState || this.hideState)) {
      return this.checked = true;
    }
  }

  cancelSelect() {
    this.hasBorder = 0;
    if (!(this.lockState || this.hideState)) {
      return this.checked = false;
    }
  }

  setZIndex(zIndex) {
    checkType(arguments, ["number"], "gameEditor.DivList.setZIndex()");
    return this.zIndex = zIndex;
  }

  zIndexIncrease() {
    return this.zIndex += 5;
  }

  zIndexDecrease() {
    return this.zIndex -= 5;
  }

  copy() {
    var copyDiv;
    copyDiv = {...this};
    copyDiv.id = uuid();
    copyDiv.x += gEData.getW();
    copyDiv.y += gEData.getH();
    return this.divList.add(copyDiv);
  }

  linkTo(linkid) {
    checkType(arguments, ["string"], "gameEditor.PreDiv.linkTo()");
    return this.linkid = linkid;
  }

  hide() {
    this.hideState = true;
    return this.hasBorder = 0;
  }

  show() {
    this.hideState = false;
    if (this.checked) {
      return this.hasBorder = this.isGroup ? 2 : 1;
    }
  }

  lock() {
    this.lockState = true;
    return this.hasBorder = 0;
  }

  unlock() {
    this.lockState = false;
    if (this.checked) {
      return this.hasBorder = this.isGroup ? 2 : 1;
    }
  }

  hideOrShow() {
    if (this.hideState) {
      return this.show();
    } else {
      return this.hide();
    }
  }

  lockOrUnlock() {
    if (this.lockState) {
      return this.unlock();
    } else {
      return this.lock();
    }
  }

  check() {
    this.checked = true;
    if (!(this.lockState || this.hideState)) {
      return this.hasBorder = this.isGroup ? 2 : 1;
    }
  }

  unCheck() {
    this.checked = false;
    if (!(this.lockState || this.hideState)) {
      return this.hasBorder = 0;
    }
  }

  inverse() {
    if (this.checked) {
      return this.unCheck();
    } else {
      return this.check();
    }
  }

});
